#ifndef ARRUS_CORE_API_OPS_US4R_H
#define ARRUS_CORE_API_OPS_US4R_H

#include <utility>

#include "DigitalDownConversion.h"
#include "TxRxSequence.h"
#include "arrus/core/api/framework/DataBufferSpec.h"

namespace arrus::ops::us4r {

class SchemeBuilder;

/**
 * A scheme to be executed within the session.
 */
class Scheme {
public:
    /**
     * How the scheme should be executed on the us4r-lite device.
     *
     * This enum value determines the source of the signal trigger
     * (i.e. whether the signal is triggered by us4oem modules or
     * host PC).
     */
    enum class WorkMode {
        /** Trigger generated by us4r, error on overflow. */
        ASYNC,
        /** Trigger generated by us4r, us4r waits on overflow */
        SYNC,
        /** Trigger generated by host, no error on overflow. DEPRECATED: will be replaced in the future by MANUAL mode */
        HOST,
        /** New data acquisition and processing is manually triggered by user. */
        MANUAL
    };

    /**
     * TODO(0.12.0) Deprecated: please use Scheme::create instead
     */
    Scheme(TxRxSequence txRxSequence, uint16 rxBufferSize, const framework::DataBufferSpec &outputBuffer,
           WorkMode workMode, std::optional<DigitalDownConversion> ddc,
           const std::vector<arrus::framework::NdArray> &constants);

    /**
     * Scheme constructor. This scheme turns off hardware IQ demodulator.
     * TODO(0.12.0) Deprecated: please use Scheme::create instead
     *
     * @param txRxSequence tx/rx sequence to perform
     * @param rxBufferSize the size of the data acquisition buffer in the memory of the Us4R device
     *   (a single element of the buffer is an output of a single tx/rx sequence execution)
     * @param outputBuffer output buffer specification
     * @param workMode scheme work mode
     */
    Scheme(TxRxSequence txRxSequence, uint16 rxBufferSize, const framework::DataBufferSpec &outputBuffer,
           WorkMode workMode)
        :Scheme(std::move(txRxSequence), rxBufferSize, outputBuffer, workMode, std::nullopt, {}) {}

    /**
     * Scheme constructor. This scheme turns on hardware IQ demodulator (sees digital down conversion parameter).
     *
     * TODO(0.12.0) Deprecated: please use Scheme::create instead
     *
     * @param txRxSequence tx/rx sequence to perform
     * @param rxBufferSize the size of the data acquisition buffer in the memory of the Us4R device
     *   (a single element of the buffer is an output of a single tx/rx sequence execution)
     * @param outputBuffer output buffer specification
     * @param workMode scheme work mode
     * @param digitalDownConversion DDC parameters
     */
    Scheme(TxRxSequence txRxSequence, uint16 rxBufferSize, const framework::DataBufferSpec &outputBuffer,
           WorkMode workMode, DigitalDownConversion ddc)
        : Scheme(std::move(txRxSequence), rxBufferSize, outputBuffer, workMode, std::move(ddc), {}) {}


    /**
     * TODO(0.12.0) Deprecated: please use Scheme::create instead
     */
    Scheme(TxRxSequence txRxSequence, uint16 rxBufferSize, const framework::DataBufferSpec &outputBuffer,
           WorkMode workMode, const std::vector<framework::NdArray> &constants)
        : Scheme(std::move(txRxSequence), rxBufferSize, outputBuffer, workMode, std::nullopt, constants) {}

    Scheme(const Scheme &o);
    Scheme(Scheme &&o) noexcept;
    virtual ~Scheme();
    Scheme& operator=(const Scheme &o);
    Scheme& operator=(Scheme &&o) noexcept;

    /**
     * TODO(0.12.0) Deprecated: please use getTxRxSequence(int ordinal) instead
     */
    const TxRxSequence &getTxRxSequence() const;
    const TxRxSequence &getTxRxSequence(size_t ordinal) const;
    const std::vector<TxRxSequence> &getTxRxSequences() const;
    uint16 getRxBufferSize() const;
    const framework::DataBufferSpec &getOutputBuffer() const;
    WorkMode getWorkMode() const;
    const std::optional<DigitalDownConversion> &getDigitalDownConversion() const;
    const std::vector<arrus::framework::NdArray> &getConstants() const;

private:
    friend class SchemeBuilder;
    Scheme();
    class Impl;
    UniqueHandle<Impl> impl;
};

class SchemeBuilder {
public:
    SchemeBuilder() = default;
    SchemeBuilder& addSequence(TxRxSequence sequence);
    SchemeBuilder& withOutputBufferDefinition(framework::DataBufferSpec spec);
    SchemeBuilder& withRxBufferSize(uint16 rxBufferSize);
    SchemeBuilder& withWorkMode(Scheme::WorkMode mode);
    SchemeBuilder& withDigitalDownConversion(DigitalDownConversion ddc);
    // TODO support constants

    Scheme build();
private:
    Scheme scheme;
};

}// namespace arrus::ops::us4r

#endif//ARRUS_CORE_API_OPS_US4R_H
